[{"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\index.js":"1","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\App.js":"2","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\api.js":"3","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Search\\index.js":"4","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Nominations\\index.js":"5","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\SearchResults\\index.js":"6","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Result\\index.js":"7","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Info\\index.js":"8","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Info\\styles.js":"9"},{"size":197,"mtime":1610229106119,"results":"10","hashOfConfig":"11"},{"size":5065,"mtime":1610308403438,"results":"12","hashOfConfig":"11"},{"size":761,"mtime":1610306990013,"results":"13","hashOfConfig":"11"},{"size":858,"mtime":1610308343307,"results":"14","hashOfConfig":"11"},{"size":1633,"mtime":1610308443042,"results":"15","hashOfConfig":"11"},{"size":2077,"mtime":1610307394604,"results":"16","hashOfConfig":"11"},{"size":1067,"mtime":1610307304610,"results":"17","hashOfConfig":"11"},{"size":2931,"mtime":1610307166505,"results":"18","hashOfConfig":"11"},{"size":355,"mtime":1610308975798,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cwuno1",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\index.js",[],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\App.js",["40","41"],"import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { getMoviesBySearch, getMovieById } from './api';\nimport Search from './components/Search';\nimport Info from './components/Info';\nimport Nominations from './components/Nominations';\nimport SearchResults from './components/SearchResults';\nimport Typography from '@material-ui/core/Typography';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport \"./style.css\"\n\nconst App = () => {\n    const [nominations, setNominations] = useState([{ Title: 'test' }]);\n    const [movies, setMovies] = useState([]);\n    const [searchTerms, setSearchTerms] = useState('');\n    const [error, setError] = useState(null)\n    const [selectedMovie, setSelectedMovie] = useState(null)\n    const [loadingSelectedMovie, setLoadingSelectedMovie] = useState(false)\n    const [loading, setLoading] = useState(false);\n\n    const theme = createMuiTheme({\n      typography: {\n        fontFamily: [\n          'Poppins',\n          'sans-serif',\n        ].join(','),\n      },\n    });\n\n    useEffect(() => {\n        if (nominations.length === 5) {\n            alert(\"You've reached your maximum nominations!\");\n        }\n    }, [nominations]);\n    \n    useEffect(() => {\n      const savedNominations = getSavedNominations();\n      if (savedNominations) {\n          setNominations(JSON.parse(savedNominations));\n      }\n    }, [])\n\n    useEffect(() => {\n        loadMovies();\n    }, [searchTerms]);\n\n    const loadMovies = () => {\n        if (searchTerms != '') {\n          setLoading(true);\n          getMoviesBySearch(searchTerms).then((data) => {\n              if (data.Error) {\n                setError(data.Error)\n                setMovies([])\n              } else {\n                setError(null)\n                setMovies(data.Search);\n              }\n              setLoading(false);\n          });\n        }\n    };\n\n    const loadSelectedMovie = (imdbID) => {\n      setLoadingSelectedMovie(true)\n      getMovieById(imdbID).then((data) => {\n        setSelectedMovie(data)\n        setLoadingSelectedMovie(false)\n      })\n    }\n\n    const onNominate = (Title, Year, imdbID) => {\n        let newNominations = [...nominations];\n        let nomination = { Title, Year, imdbID };\n\n        if (isAlreadyNominated(imdbID)) {\n        } else {\n            if (nominations.length < 5) {\n                newNominations.push(nomination);\n            }\n        }\n\n        setNominations(newNominations);\n        saveNominations();\n    };\n\n    const getSavedNominations = () => {\n        return localStorage.getItem('LOCAL_NOMINATIONS');\n    };\n\n    const saveNominations = () => {\n        localStorage.setItem('LOCAL_NOMINATIONS', JSON.stringify(nominations));\n    };\n\n    const removeNomination = (imdbID) => {\n        setNominations(\n            nominations.filter((nomination) => nomination.imdbID !== imdbID)\n        );\n    };\n\n    const isAlreadyNominated = (imdbID) => {\n      return nominations.some((nomination) => nomination.imdbID === imdbID);\n    };\n\n    window.addEventListener('beforeunload', () => {\n        saveNominations();\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{\n                width: '70%',\n                margin: 'auto',\n                padding: '2rem 1rem',\n                maxWidth: '1080px',\n            }}\n        >\n            <Grid container direction=\"column\" style={{marginBottom: \"5vh\"}}>\n              <Grid item>\n                <Typography variant=\"h4\" style={{color: \"#FFFFFF\"}}>The Shoppies 2021</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{color: \"#FFFFFF\"}}>Search for your favourite movies and nominate your personal top 5 movies!</Typography>\n              </Grid>\n            </Grid>\n            <Grid container direction=\"row\">\n              <Grid container direction=\"column\" style={{ minWidth: \"560px\", width: \"30vw\", marginBottom: '2.5vh' }}>\n                <Search setSearchTerms={setSearchTerms} />\n                <SearchResults\n                      isAlreadyNominated={isAlreadyNominated}\n                      onNominate={onNominate}\n                      setSearchTerms={setSearchTerms}\n                      searchTerms={searchTerms}\n                      loading={loading}\n                      error={error}\n                      loadSelectedMovie={loadSelectedMovie}\n                      movies={movies}\n                  />\n              </Grid>\n              <Grid container direction=\"column\" style={{width: \"20vw\"}}>\n                <Nominations\n                  removeNomination={removeNomination}\n                  nominations={nominations}\n                  loadSelectedMovie={loadSelectedMovie}\n                />\n                {selectedMovie && <Info loading={loadingSelectedMovie} selectedMovie={selectedMovie} />}\n              </Grid>\n            </Grid>\n        </Grid>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\api.js",[],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Search\\index.js",[],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Nominations\\index.js",[],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\SearchResults\\index.js",["42"],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Result\\index.js",[],"C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Info\\index.js",["43"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ClipLoader from 'react-spinners/ClipLoader';\r\n\r\nconst Info = ({ selectedMovie, loading }) => {\r\n    const {\r\n        Title,\r\n        Year,\r\n        Released,\r\n        Director,\r\n        Actors,\r\n        Plot,\r\n        Poster,\r\n        Awards,\r\n    } = selectedMovie;\r\n    console.log(selectedMovie);\r\n    return (\r\n        <Paper\r\n            style={{\r\n                backgroundColor: '#f4f6f8',\r\n                overflow: 'auto',\r\n                padding: '1rem 2rem',\r\n            }}\r\n        >\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Typography variant=\"h5\">\r\n                        About {`\"${Title} (${Year})\"`}\r\n                    </Typography>\r\n                </Grid>\r\n                {loading ? (\r\n                    <ClipLoader color=\"#008060\" loading={loading} size={25} />\r\n                ) : (\r\n                    <Grid container>\r\n                        <Grid item >\r\n                            {Poster !== 'N/A' && (\r\n                                <img src={Poster} style={{ width: 250 }} />\r\n                            )}\r\n                        </Grid>\r\n                        <Grid container direction=\"column\" style={{lineHeight: 0.05}}>\r\n                            <Grid item>\r\n                                <Typography variant=\"caption\">\r\n                                    Released in {Released}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"caption\">\r\n                                    Directed by: {Director}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"caption\">\r\n                                    {Actors}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Typography variant=\"caption\">\r\n                                    {Awards}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        \r\n                        <Grid item style={{marginTop: \"1vh\"}}>\r\n                            <Typography\r\n                                style={{ lineHeight: '1rem' }}\r\n                                variant=\"caption\"\r\n                            >\r\n                                {Plot}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Info;\r\n","C:\\Users\\jbaut\\Desktop\\Shopify Challenge Frontend\\app\\src\\components\\Info\\styles.js",[],{"ruleId":"44","severity":1,"message":"45","line":45,"column":8,"nodeType":"46","endLine":45,"endColumn":21,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":48,"column":25,"nodeType":"50","messageId":"51","endLine":48,"endColumn":27},{"ruleId":"48","severity":1,"message":"52","line":33,"column":36,"nodeType":"50","messageId":"51","endLine":33,"endColumn":38},{"ruleId":"53","severity":1,"message":"54","line":39,"column":33,"nodeType":"55","endLine":39,"endColumn":76},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadMovies'. Either include it or remove the dependency array.","ArrayExpression",["56"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"57","fix":"58"},"Update the dependencies array to be: [loadMovies, searchTerms]",{"range":"59","text":"60"},[1477,1490],"[loadMovies, searchTerms]"]